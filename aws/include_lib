STATE_ACTIVE=ACTIVE
STATE_UPDATING=UPDATING
STATE_CREATING=CREATING
STATE_DELETING=DELETING
STATE_MISSING=MISSING

STATE_ACTIVE_CODE=9
STATE_UPDATING_CODE=7
STATE_CREATING_CODE=3
STATE_DELETING_CODE=2
STATE_MISSING_CODE=1


debug(){
    local __msg="$1"
    echo "\n [DEBUG] `date` ... $__msg\n"
}

info(){
    local __msg="$1"
    echo "\n [INFO]  `date` ->>> $__msg\n"
}

warn(){
    local __msg="$1"
    echo "\n [WARN]  `date` *** $__msg\n"
}

err(){
    local __msg="$1"
    echo "\n [ERR]   `date` !!! $__msg\n"
}

goin(){
    local __msg="$1"
    local __params="$2"
    echo "\n [IN]    `date` ___ $__msg [$__params]\n"
}

goout(){
    local __msg="$1"
    local __outcome="$2"
    echo "\n [OUT]   `date` ___ $__msg [$__outcome]\n"
}


getTableState()
{
    goin "getTableState" $1
    local __r=$STATE_MISSING_CODE
    local __table=$1
    local __s=`aws dynamodb describe-table --output text --table-name $__table | grep "^TABLE" | awk '{print $8}'`
    if [ ! -z "$__s" ]; then
        if [ "$__s" = $STATE_DELETING ]; then __r=$STATE_DELETING_CODE; fi
        if [ "$__s" = "$STATE_CREATING" ]; then __r=$STATE_CREATING_CODE; fi
        if [ "$__s" = "$STATE_UPDATING" ]; then __r=$STATE_UPDATING_CODE; fi
        if [ "$__s" = "$STATE_ACTIVE" ]; then __r=$STATE_ACTIVE_CODE; fi
    else
        __s=$STATE_MISSING
    fi
    goout "getTableState" "$__r:$__s"
    return $__r
}

checkTableExistence()
{
    goin "checkTableExistence" $1
    local __r=1
    local __table=$1
    
    local __s=0
    while [ "$__s" -ne "$STATE_MISSING_CODE" ] && [ "$__s" -ne "$STATE_ACTIVE_CODE" ]
    do
        getTableState "$__table"
        __s=$?
        sleep 6
    done

    if [ "$__s" -eq "$STATE_MISSING_CODE" ] 
    then
        __r=0
    fi
    
    goout "checkTableExistence" $__r
    return $__r
}

waitForNoTableState()
{
    goin "waitForNoTableState" $1
    local __table=$1
    
    local __s=0
    while [ "$__s" -ne "$STATE_MISSING_CODE" ]
    do
        getTableState "$__table"
        __s=$?
        sleep 6
    done
    goout "waitForNoTableState"
}

deleteTable()
{
    goin "deleteTable" $1
    local __r=0
    local __table=$1
    
    checkTableExistence "$__table"
    local __s=$?
    
    if [ "$__s" -eq "0" ]; then
        warn "table $__table is not there"
    else
        aws dynamodb delete-table --table-name $__table    
        __r=$?
        if [ "$__r" -eq "0" ]
        then 
            waitForNoTableState "$__table"
            info "table $__table not there anymore"
        fi
    fi
    goout "deleteTable" $__r
    return $__r
}
    

waitForTableState()
{
    goin "waitForTableState" $1
    local __table=$1
    local __state=$2
    
    local __s=0
    while [ ! "$__s" -eq "$__state" ]
    do
        getTableState "$__table"
        __s=$?
        sleep 6
    done
    
    goout "waitForTableState"
}

createTable()
{
    goin "createTable" $1
    local __r=0
    local __table=$1

    checkTableExistence "$__table"
    local __s=$?
    if [ ! "$__s" -eq "0" ]; then
        warn "table $__table already there"
        __r=0
    else
        aws dynamodb create-table --table-name $__table --attribute-definitions AttributeName=id,AttributeType=S --key-schema AttributeName=id,KeyType=HASH --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
        __r=$?
        if [ "$__r" -eq "0" ]; then
                waitForTableState "$__table" "$STATE_ACTIVE_CODE"
        else
            __r=1
        fi
    fi
    goout "createTable" "$__table:$__r"
    return $__r
}

createBucket()
{
    goin "createBucket" $1
    local __bucketName=$1
    __bucket="s3://$__bucketName"
    aws s3 ls | grep $__bucket
    local __r=$?
    if [ "$__r" -eq "0" ]
    then
        warn "found bucket $__bucket already created"
        __r=0
    else
        aws s3 mb $__bucket
        __r=$?
        if [ ! "$__r" -eq "0" ] ; then warn "could not create bucket $__bucket"; else info "created bucket $__bucket" ; fi
    fi
    goout "createBucket" "$__r"
    return $__r
}


deleteBucket()
{
    goin "deleteBucket" $1
    local __bucketName=$1
    __bucket="s3://$__bucketName"
    aws s3 ls | grep $__bucket
    local __r=$?
    if [ "$__r" -ne "0" ]; then
        warn "couldn't find bucket $__bucket, not there"
        __r=0
    else
        aws s3 rb $__bucket --force
        __r=$?
        if [ ! "$__r" -eq "0" ] ; then warn "! could not delete bucket $__bucket !"; else info "deleted bucket $__bucket" ; fi
    fi
    goout "deleteBucket" $__r
    return $__r
}

createBucketsPolicy()
{
    goin "createBucketsPolicy" $1

    local policy=$1
    local buckets="$2"
    local store_buckets=
    for b in $buckets; do
        store_buckets=$store_buckets",\"arn:aws:s3:::$b\""
    done
    local store_buckets_resource="\"arn:aws:s3:::*\/*\""$store_buckets

    sed  "s/.*\"Resource\": \[ XXXYYYZZZ \].*/\t\t\"Resource\": \[ $store_buckets_resource \]/" $this_folder/$policy.policy > $this_folder/$policy.json
    aws iam create-policy --policy-name $policy --policy-document file://$this_folder/$policy.json
    local __r=$?
    if [ ! "$__r" -eq "0" ] ; then warn "could not create policy $policy"; else info "created policy $policy" ; fi
    rm $this_folder/$policy.json

    goout "createBucketsPolicy" $__r
}

deleteBucketsPolicy()
{
    goin "deleteBucketsPolicy" $1
    local policy=$1
    
    arn=`aws iam list-policies --output text | grep $policy | awk '{print $2}'`
    for v in `aws iam list-policy-versions --policy-arn $arn --output text | awk '{print $4}'`; do
        aws iam delete-policy-version --policy-arn $arn --version-id $v
        #if [ ! "$?" -eq "0" ] ; then echo "! could not delete policy $p version $v !...leaving." && cd $_pwd && return 1; else echo "deleted policy $p version $v" ; fi
        if [ ! "$?" -eq "0" ] ; then echo "------- ! could not delete policy $p version $v !"; else echo "------- deleted policy $p version $v" ; fi
    done
    aws iam delete-policy --policy-arn $arn
    #if [ ! "$?" -eq "0" ] ; then echo "! could not delete policy $p !...leaving." && cd $_pwd && return 1; else echo "deleted policy $p" ; fi
    if [ ! "$?" -eq "0" ] ; then echo "------- ! could not delete policy $p !"; else echo "------- deleted policy $p" ; fi
    

    goout "deleteBucketsPolicy" $__r
}

































