STATE_ACTIVE=ACTIVE
STATE_UPDATING=UPDATING
STATE_CREATING=CREATING
STATE_DELETING=DELETING
STATE_MISSING=MISSING

STATE_ACTIVE_CODE=9
STATE_UPDATING_CODE=7
STATE_CREATING_CODE=3
STATE_DELETING_CODE=2
STATE_MISSING_CODE=1

LOG_TRACE=TRUE

debug(){
    local __msg="$1"
    echo "\n [DEBUG] `date` ... $__msg\n"
}

info(){
    local __msg="$1"
    echo "\n [INFO]  `date` ->>> $__msg\n"
}

warn(){
    local __msg="$1"
    echo "\n [WARN]  `date` *** $__msg\n"
}

err(){
    local __msg="$1"
    echo "\n [ERR]   `date` !!! $__msg\n"
}

goin(){
    if [ ! -z $LOG_TRACE ]; then
        local __msg="$1"
        local __params="$2"
        echo "\n [IN]    `date` ___ $__msg [$__params]\n"
    fi
}

goout(){
    if [ ! -z $LOG_TRACE ]; then
        local __msg="$1"
        local __outcome="$2"
        echo "\n [OUT]   `date` ___ $__msg [$__outcome]\n"
    fi
}

stat()
{
    goin "stat"
    
    info "current buckets:"
    aws s3 ls
    info "current tables:"
    aws dynamodb --output text list-tables
    info "current policies:"
    aws iam list-policies --output text | grep $PROJ
    
    goout "stat"
}

getTableState()
{
    goin "getTableState" $1
    local __r=$STATE_MISSING_CODE
    local __table=$1
    local __s=`aws dynamodb describe-table --output text --table-name $__table | grep "^TABLE" | awk '{print $8}'`
    if [ ! -z "$__s" ]; then
        if [ "$__s" = $STATE_DELETING ]; then __r=$STATE_DELETING_CODE; fi
        if [ "$__s" = "$STATE_CREATING" ]; then __r=$STATE_CREATING_CODE; fi
        if [ "$__s" = "$STATE_UPDATING" ]; then __r=$STATE_UPDATING_CODE; fi
        if [ "$__s" = "$STATE_ACTIVE" ]; then __r=$STATE_ACTIVE_CODE; fi
    else
        __s=$STATE_MISSING
    fi
    goout "getTableState" "$__r:$__s"
    return $__r
}

checkTableExistence()
{
    goin "checkTableExistence" $1
    local __r=1
    local __table=$1
    
    local __s=0
    while [ "$__s" -ne "$STATE_MISSING_CODE" ] && [ "$__s" -ne "$STATE_ACTIVE_CODE" ]
    do
        getTableState "$__table"
        __s=$?
        sleep 6
    done

    if [ "$__s" -eq "$STATE_MISSING_CODE" ] 
    then
        __r=0
    fi
    
    goout "checkTableExistence" $__r
    return $__r
}

waitForNoTableState()
{
    goin "waitForNoTableState" $1
    local __table=$1
    
    local __s=0
    while [ "$__s" -ne "$STATE_MISSING_CODE" ]
    do
        getTableState "$__table"
        __s=$?
        sleep 6
    done
    goout "waitForNoTableState"
}

deleteTable()
{
    goin "deleteTable" $1
    local __r=0
    local __table=$1
    
    checkTableExistence "$__table"
    local __s=$?
    
    if [ "$__s" -eq "0" ]; then
        warn "table $__table is not there"
    else
        aws dynamodb delete-table --table-name $__table    
        __r=$?
        if [ "$__r" -eq "0" ]
        then 
            waitForNoTableState "$__table"
            info "table $__table not there anymore"
        fi
    fi
    goout "deleteTable" $__r
    return $__r
}
    

waitForTableState()
{
    goin "waitForTableState" $1
    local __table=$1
    local __state=$2
    
    local __s=0
    while [ ! "$__s" -eq "$__state" ]
    do
        getTableState "$__table"
        __s=$?
        sleep 6
    done
    
    goout "waitForTableState"
}

createTable()
{
    goin "createTable" $1
    local __r=0
    local __table=$1

    checkTableExistence "$__table"
    local __s=$?
    if [ ! "$__s" -eq "0" ]; then
        warn "table $__table already there"
        __r=0
    else
        aws dynamodb create-table --table-name $__table --attribute-definitions AttributeName=id,AttributeType=S --key-schema AttributeName=id,KeyType=HASH --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
        __r=$?
        if [ "$__r" -eq "0" ]; then
                waitForTableState "$__table" "$STATE_ACTIVE_CODE"
                info "created table $__table"
        else
            __r=1
        fi
    fi
    goout "createTable" "$__table:$__r"
    return $__r
}

createBucket()
{
    goin "createBucket" $1
    local __bucketName=$1
    __bucket="s3://$__bucketName"
    aws s3 ls | grep $__bucket
    local __r=$?
    if [ "$__r" -eq "0" ]
    then
        warn "found bucket $__bucket already created"
        __r=0
    else
        aws s3 mb $__bucket
        __r=$?
        if [ ! "$__r" -eq "0" ] ; then warn "could not create bucket $__bucket"; else info "created bucket $__bucket" ; fi
    fi
    goout "createBucket" "$__r"
    return $__r
}


deleteBucket()
{
    goin "deleteBucket" $1
    local __bucketName=$1
    __bucket="s3://$__bucketName"
    aws s3 ls | grep $__bucketName
    local __r=$?
    if [ "$__r" -ne "0" ]; then
        warn "couldn't find bucket $__bucket, not there"
        __r=0
    else
        aws s3 rb $__bucket --force
        __r=$?
        if [ ! "$__r" -eq "0" ] ; then warn "! could not delete bucket $__bucket !"; else info "deleted bucket $__bucket" ; fi
    fi
    goout "deleteBucket" $__r
    return $__r
}


createFunction()
{
    goin "createFunction" "$1 $2 $3 $4 $5 $6 $7"
    local __r=0
    local __function=$1
    local __role=$2
    local __role_policy_doc=$2
    local __zip=$3
    local __handler=$4
    local __runtime=$5
    local __timeout=$6
    local __memory=$7

    local arn=`aws iam list-roles --output text | grep $__role | awk '{print $2}'`
    if [ -z "$arn" ]
    then 
        warn "could not find role arn for name: $__role"
        __r=1
    else
        echo "aws lambda create-function --function-name $__function --zip-file fileb://$__zip --handler $__handler --runtime $__runtime --role $arn --timeout $__timeout --memory-size $__memory" 
        aws lambda create-function --function-name $__function --zip-file fileb://$__zip --handler $__handler --runtime $__runtime --role $arn --timeout $__timeout --memory-size $__memory
        __r=$?
        if [ ! "$__r" -eq "0" ] ; then warn "! could not create function $__function !"; else info "created function $__function" ; fi
    fi

    goout "createFunction" $__r
    return $__r
}

deleteFunction()
{
    goin "deleteFunction" "$1"
    local __r=0
    local __function=$1
    
    aws lambda delete-function --function-name $__function
    __r=$?
    if [ ! "$__r" -eq "0" ] ; then 
        warn "could not delete function $__function"
    else 
        info "deleted function $__function"
    fi
 
    goout "deleteFunction" $__r
    return $__r
}

addPermissionToFunction()
{
    goin "addPermissionToFunction" "$1 $2 $3 $4 $5 $6"
    local __function=$1
    local __principal=$2
    local __statement_id=$3
    local __action=$4
    local __source_arn=$5
    local __source_account=$6
    
    local __r=0
    aws lambda add-permission --function-name $__function --principal $__principal --statement-id $__statement_id --action $__action --source-arn $__source_arn 
    #--source-account $__source_account
    __r=$?
    if [ ! "$__r" -eq "0" ] ; then warn "! could not setup permissions for function $__function !"; else info "created permissions for function $__function" ; fi
 
    goout "addPermissionToFunction" $__r
    return $__r
}


removePermissionFromFunction()
{
    goin "removePermissionFromFunction" "$1 $2"
    local __r=0
    local __function=$1
    local __statement_id=$2
    
    aws lambda remove-permission --function-name $__function --statement-id $__statement_id
    __r=$?
    if [ ! "$__r" -eq "0" ] ; then 
        warn "could not remove permission from function $__function"
    else 
        info "removed permission from function $__function"
    fi
 
    goout "removePermissionFromFunction" $__r
    return $__r
}















